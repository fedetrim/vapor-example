//
//  AddReviewViewController.swift
//  App
//
//  Created by Nahuel Zapata on 8/12/18.
//  Copyright (c) 2018 Federico Trimboli. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AddReviewDisplayLogic: class {
    func displayOnSave(basedOn viewModel: AddReview.Save.ViewModel)
}

class AddReviewViewController: UIViewController, AddReviewDisplayLogic {
    var interactor: AddReviewBusinessLogic?
    var router: (NSObjectProtocol & AddReviewRoutingLogic & AddReviewDataPassing)?

    @IBOutlet weak var reviewerMailTextField: UITextField!
    @IBOutlet weak var starsView: CosmosView!
    @IBOutlet weak var opinionTextView: UITextView!

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    private func setup() {
        let viewController = self
        let interactor = AddReviewInteractor()
        let presenter = AddReviewPresenter()
        let router = AddReviewRouter()

        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        setUpTextViewDelegate()
        changeNavigationTitle("Add review")
        addHideKeyboardGesture()
    }

    func setUpTextViewDelegate() {
        self.opinionTextView.delegate = self
    }

    @IBAction func saveReview(_ sender: Any) {
        if let validRequest = validateFields() {
            interactor?.prepareForSave(validRequest)
        }
    }

    func validateFields() -> AddReview.Save.Request? {
        guard let reviewerMail = reviewerMailTextField.text else {
            return nil
        }

        guard !opinionTextView.text.isEmpty else {
            return nil
        }

        return AddReview.Save.Request(description: opinionTextView.text, stars: starsView.rating, email: reviewerMail)
    }

    func displayOnSave(basedOn viewModel: AddReview.Save.ViewModel) {
        do {
            let response = try viewModel.result.dematerialize()

            if response {
                router?.routeBack()
            } else {
                displayError(title: "Error", description: "An error has ocurred")
            }
        } catch {
            displayError(title: "Error", description: error.localizedDescription)
        }
    }

    func addHideKeyboardGesture() {
        let gesture = UITapGestureRecognizer()
        gesture.addTarget(self, action: #selector(self.hideKeyBoard(sender:)))

        self.view.addGestureRecognizer(gesture)
    }

    @objc
    func hideKeyBoard(sender: UITapGestureRecognizer) {
        self.view.endEditing(true)
    }

}

extension UIViewController {
    func changeNavigationTitle(_ title: String) {
        self.navigationItem.title = title
    }

    func displayError(title: String, description: String) {
        let alertController = UIAlertController(title: title, message: description, preferredStyle: .alert)

        self.present(alertController, animated: true, completion: nil)
    }
}

extension AddReviewViewController: UITextViewDelegate {
    func textViewDidEndEditing(_ textView: UITextView) {
        if textView.text.isEmpty {
            textView.text = "Add your own review!"
            textView.textColor = .lightGray
        }
    }

    func textViewDidBeginEditing(_ textView: UITextView) {
        if textView.text == "Add your own review!" {
            textView.text = String()
            textView.textColor = .black
        }
    }
}
