//
//  TechTalksRouter.swift
//  App
//
//  Created by Nahuel Zapata on 8/12/18.
//  Copyright (c) 2018 Federico Trimboli. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

@objc protocol TechTalksRoutingLogic {

//    func routeToUpdateFamilyMember()
}

protocol TechTalksDataPassing {
    var dataStore: TechTalksDataStore? { get }
}

class TechTalksRouter: NSObject, TechTalksRoutingLogic, TechTalksDataPassing {
    weak var viewController: TechTalksViewController?
    var dataStore: TechTalksDataStore?
    var navigator: Navigatable? // If you don't have the Navigatable protocol, just uncomment the last few lines.

    init(navigator: Navigatable? = Navigator()) {
        self.navigator = navigator
    }

    // MARK: Routing
//    func routeToUpdateFamilyMember() {
//        let destinationController = FamilyMemberViewController()
//        var destinationStore = destinationController.router?.dataStore!
//        destinationController.state = .update
//
//        passDataToUpdateFamilyMember(from: dataStore!, to: &destinationStore!)
//        if let viewController = viewController {
//            navigateToAddFamiliar(from: viewController, to: destinationController)
//        }
//    }
//
//    func navigateToAddFamiliar(from source: FamilyAccountViewController, to destination: FamilyMemberViewController) {
//        source.navigationController?.pushViewController(destination, animated: true)
//    }
//
//    func passDataToUpdateFamilyMember(from source: FamilyAccountDataStore, to destination: inout FamilyMemberDataStore) {
//        if let selectedRow = viewController?.myTableView.indexPathForSelectedRow?.row {
//            destination.user = source.users[selectedRow]
//        }
//    }
//
//    func getPreviousViewController<T>(expected: T.Type) -> T where T: UIViewController {
//        var indexRef = 0
//        if let index = viewController?.navigationController?.viewControllers.count {
//            indexRef = index - 2
//        }
//
//        guard let previousController = viewController?.navigationController?.viewControllers[indexRef]
//            else { fatalError() }
//
//        guard let controller = previousController as? T else { fatalError() }
//
//        return controller
//    }
}
